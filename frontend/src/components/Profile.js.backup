import React, { useState, useEffect, useCallback, memo } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import './Profile.css';

const API_BASE_URL = 'http://localhost:8091/api';

const Profile = memo(function Profile({ user, setUser, onLogout }) {
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    bio: '',
    location: '',
    interests: ''
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  // Initialize form data only once when user changes
  useEffect(() => {
    if (user) {
      setFormData({
        name: user.name || '',
        age: user.age || '',
        bio: user.bio || '',
        location: user.location || '',
        interests: user.interests || ''
      });
    }
  }, [user?.id]); // Only re-run when user ID changes, not when user object changes

  const handleChange = useCallback((e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setMessage('');

    try {
      const token = localStorage.getItem('authToken');
      const updateData = {
        ...formData,
        age: parseInt(formData.age)
      };

      const response = await axios.put(
        `${API_BASE_URL}/users/profile`,
        updateData,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const updatedUser = response.data;
      setUser(updatedUser);
      localStorage.setItem('userData', JSON.stringify(updatedUser));
      setMessage('Profile updated successfully!');
      setIsEditing(false);
    } catch (error) {
      setError('Failed to update profile. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = useCallback(() => {
    if (initialFormData) {
      setFormData(initialFormData);
    }
    setIsEditing(false);
    setError('');
    setMessage('');
  }, [initialFormData]);

  // Show loading state if user data is not available
  if (!user || !isFormReady) {
    return (
      <div className="profile-container">
        <div className="loading-spinner">Loading profile...</div>
      </div>
    );
  }

  return (
    <div className="profile-container">
      <nav className="profile-nav">
        <div className="nav-brand">
          <h2>FindThatOne</h2>
        </div>
        <div className="nav-links">
          <Link to="/dashboard" className="nav-link">Discover</Link>
          <Link to="/chat" className="nav-link">Matches</Link>
          <button onClick={onLogout} className="logout-btn">Logout</button>
        </div>
      </nav>

      <div className="profile-content">
        <div className="profile-card">
          <div className="profile-header">
            <div className="profile-avatar">
              <img 
                src={user?.profilePhotoUrl || '/placeholder-avatar.png'} 
                alt={user?.name}
                onError={(e) => {
                  e.target.src = '/placeholder-avatar.png';
                }}
              />
              <button className="change-photo-btn" title="Change Photo">
                ðŸ“·
              </button>
            </div>
            <div className="profile-info">
              <h2>{user?.name}</h2>
              <p className="email">{user?.email}</p>
              <p className="member-since">
                Member since {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}
              </p>
            </div>
          </div>

          {message && <div className="success-message">{message}</div>}
          {error && <div className="error-message">{error}</div>}

          <form onSubmit={handleSubmit} className="profile-form">
            <div className="form-group">
              <label htmlFor="name">Full Name</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                disabled={!isEditing}
                required
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="age">Age</label>
                <input
                  type="number"
                  id="age"
                  name="age"
                  value={formData.age}
                  onChange={handleChange}
                  disabled={!isEditing}
                  min="18"
                  max="100"
                  required
                />
              </div>

              <div className="form-group">
                <label htmlFor="location">Location</label>
                <input
                  type="text"
                  id="location"
                  name="location"
                  value={formData.location}
                  onChange={handleChange}
                  disabled={!isEditing}
                  required
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="bio">Bio</label>
              <textarea
                id="bio"
                name="bio"
                value={formData.bio}
                onChange={handleChange}
                disabled={!isEditing}
                rows="4"
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="interests">Interests</label>
              <input
                type="text"
                id="interests"
                name="interests"
                value={formData.interests}
                onChange={handleChange}
                disabled={!isEditing}
                placeholder="e.g. hiking, reading, cooking, music"
                required
              />
            </div>

            <div className="form-actions">
              {!isEditing ? (
                <button 
                  type="button" 
                  onClick={() => setIsEditing(true)}
                  className="edit-btn"
                >
                  Edit Profile
                </button>
              ) : (
                <div className="edit-actions">
                  <button 
                    type="button" 
                    onClick={handleCancel}
                    className="cancel-btn"
                    disabled={loading}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    className="save-btn"
                    disabled={loading}
                  >
                    {loading ? 'Saving...' : 'Save Changes'}
                  </button>
                </div>
              )}
            </div>
          </form>

          <div className="profile-stats">
            <div className="stat-item">
              <span className="stat-number">{user?.gender || 'N/A'}</span>
              <span className="stat-label">Gender</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{user?.isActive ? 'Active' : 'Inactive'}</span>
              <span className="stat-label">Status</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{user?.isEmailVerified ? 'Verified' : 'Pending'}</span>
              <span className="stat-label">Email</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Profile;
