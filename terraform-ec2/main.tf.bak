# Configure the AWS Provider
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Create a VPC
resource "aws_vpc" "findtheone_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name        = "findtheone-vpc"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Create an Internet Gateway
resource "aws_internet_gateway" "findtheone_igw" {
  vpc_id = aws_vpc.findtheone_vpc.id

  tags = {
    Name        = "findtheone-igw"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Create a public subnet
resource "aws_subnet" "findtheone_public_subnet" {
  vpc_id                  = aws_vpc.findtheone_vpc.id
  cidr_block              = var.public_subnet_cidr
  availability_zone       = data.aws_availability_zones.available.names[0]
  map_public_ip_on_launch = true

  tags = {
    Name        = "findtheone-public-subnet"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Get available AZs
data "aws_availability_zones" "available" {
  state = "available"
}

# Create a route table for the public subnet
resource "aws_route_table" "findtheone_public_rt" {
  vpc_id = aws_vpc.findtheone_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.findtheone_igw.id
  }

  tags = {
    Name        = "findtheone-public-rt"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Associate the route table with the public subnet
resource "aws_route_table_association" "findtheone_public_rta" {
  subnet_id      = aws_subnet.findtheone_public_subnet.id
  route_table_id = aws_route_table.findtheone_public_rt.id
}

# Create security group for the EC2 instance
resource "aws_security_group" "findtheone_sg" {
  name        = "findtheone-security-group"
  description = "Security group for FindTheOne application"
  vpc_id      = aws_vpc.findtheone_vpc.id

  # SSH access
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTP access for frontend
  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTPS access for frontend
  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Backend API access
  ingress {
    description = "Backend API"
    from_port   = 8091
    to_port     = 8091
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # MySQL access (for local connections)
  ingress {
    description = "MySQL"
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr]
  }

  # All outbound traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "findtheone-sg"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Get the latest Ubuntu 22.04 LTS AMI
data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = ["099720109477"] # Canonical

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

# Create an Elastic IP
resource "aws_eip" "findtheone_eip" {
  domain = "vpc"
  
  depends_on = [aws_internet_gateway.findtheone_igw]

  tags = {
    Name        = "findtheone-eip"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Create the EC2 instance
resource "aws_instance" "findtheone_instance" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = var.instance_type
  key_name               = var.key_pair_name
  vpc_security_group_ids = [aws_security_group.findtheone_sg.id]
  subnet_id              = aws_subnet.findtheone_public_subnet.id

  # User data script to initialize the instance
  user_data = templatefile("${path.module}/user-data.sh", {
    db_password = var.db_password
    jwt_secret  = var.jwt_secret
  })

  root_block_device {
    volume_type           = "gp3"
    volume_size           = var.root_volume_size
    delete_on_termination = true
    encrypted             = true

    tags = {
      Name        = "findtheone-root-volume"
      Environment = var.environment
      Project     = "FindTheOne"
    }
  }

  tags = {
    Name        = "findtheone-instance"
    Environment = var.environment
    Project     = "FindTheOne"
  }
}

# Associate the Elastic IP with the instance
resource "aws_eip_association" "findtheone_eip_association" {
  instance_id   = aws_instance.findtheone_instance.id
  allocation_id = aws_eip.findtheone_eip.id
}
